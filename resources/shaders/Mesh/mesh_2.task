#version 450

#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shader_draw_parameters : enable
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_KHR_shader_subgroup_ballot: require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Meshlet
{
    // vec3 keeps Meshlet aligned to 16 bytes which is important because C++ has an alignas() directive
    vec3 center;
    float radius;
    float cone_axis[3];
    float cone_cutoff;

    uint dataOffset;
    uint mesh_index;
    uint vertexCount;
    uint triangleCount;
};

// struct Task
// {
//     uint    primitive_base_id;
//     uint    primitive_offsets[32];
//     uint    meshletIndices[32];
// };

// taskPayloadSharedEXT Task OUT;

layout(set = 0, binding = 0) uniform CameraUniform
{
	mat4 view;
	mat4 proj;
	mat4 viewproj;
    vec4 position;
    vec4 frustumPlanes[6];
} cameraData;

layout(set = 0, binding = 1) readonly buffer Meshlets
{
    Meshlet meshlets[];
};

layout(std430, push_constant) uniform PushConstants
{
    mat4 model;
} constants;

bool coneCull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff)
{
    return dot(center - cameraData.position.xyz, cone_axis) >= cone_cutoff * length(center - cameraData.position.xyz) + radius;
}

void main()
{
    uint meshlet_id = gl_GlobalInvocationID.x;
    uint workgroup_meshlet_base_id = gl_WorkGroupID.x * 32;
    uint workgroup_primitive_base_id = workgroup_meshlet_base_id * 32;
    uint local_primitive_offset = gl_LocalInvocationID.x * 32;

    // vec4 center = constants.model * vec4(meshlets[meshlet_index].center, 1);
    // float scale = length( constants.model[0] );
    // float radius = meshlets[meshlet_index].radius * scale;

    // vec3 cone_axis = mat3( constants.model ) * 
    // vec3(int(meshlets[meshlet_index].cone_axis[0]) / 127.0, 
    // int(meshlets[meshlet_index].cone_axis[1]) / 127.0, 
    // int(meshlets[meshlet_index].cone_axis[2]) / 127.0);

    //float cone_cutoff = int(meshlets[meshlet_index].cone_cutoff) / 127.0;

    //bool accept = true; //false;
    //accept = !coneCull(center.xyz, radius, cone_axis, cone_cutoff);

    //vec4 view_center = cameraData.view * center;

    //bool frustum_visible = true;
    //for ( uint i = 0; i < 6; ++i ) {
    //    frustum_visible = frustum_visible && (dot( cameraData.frustumPlanes[i], view_center) > -radius);
    //}

    //accept = accept && frustum_visible;

   //uvec4 ballot = subgroupBallot(accept);
    //uint count = subgroupBallotBitCount(ballot);

    //if (gl_LocalInvocationID.x == 0)
    //{
    //    OUT.primitive_base_id = workgroup_primitive_base_id;
        EmitMeshTasksEXT(119, 1, 1);
    //}

    //uint index = subgroupBallotExclusiveBitCount(ballot);

    //if (accept)
    //OUT.primitive_offsets[index] = local_primitive_offset;
    //OUT.meshletIndices[index] = meshlet_id;
}