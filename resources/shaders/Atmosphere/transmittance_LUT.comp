#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba32f) uniform image2D OutputImage;

#define STEP_COUNT 40
// Unidades en Megametros (MM)
const float PlanetRadius = 6.360;
const float AtmosphereRadius = 6.460;

// Rayleight & Mie parameters
const vec3 rayleighScatteringBase = vec3(5.802, 13.558, 33.1);
const float mieScatteringBase = 3.996;
const float mieExtinctionBase = 4.4;
const float rayleighAbsorptionBase = 0.0;
const vec3 ozoneAbsorptionBase = vec3(0.650, 1.881, 0.085);

const float kHeightR = 8.0; // scale height for rayleigh 
const float kHeightM = 1.2; // scale height for mie

float safeacos(const float x)
{
    return acos(clamp(x, -1.0, 1.0));
}

// From https://gamedev.stackexchange.com/questions/96459/fast-ray-sphere-collision-code.
float rayIntersectSphere(vec3 ro, vec3 rd, float rad)
{
    float b = dot(ro, rd);
    float c = dot(ro, ro) - rad*rad;
    if (c > 0.0f && b > 0.0) return -1.0;
    float discr = b*b - c;
    if (discr < 0.0) return -1.0;
    // Special case: inside sphere, use far discriminant
    if (discr > b*b) return (-b + sqrt(discr));
    return -b - sqrt(discr);
}

void getScatteringValues(vec3 pos, 
                         out vec3 rayleighScattering, 
                         out float mieScattering,
                         out vec3 extinction) 
{
    float altitudeKM = (length(pos)-PlanetRadius) * 1000.0;
    float rayleighDensity = exp(-altitudeKM/8.0);
    float mieDensity = exp(-altitudeKM/1.2);
    
    rayleighScattering = rayleighScatteringBase * rayleighDensity;
    float rayleighAbsorption = rayleighAbsorptionBase * rayleighDensity;
    
    mieScattering = mieScatteringBase * mieDensity;
    float mieAbsorption = mieExtinctionBase * mieDensity;
    
    vec3 ozoneAbsorption = ozoneAbsorptionBase * max(0.0, 1.0 - abs(altitudeKM-25.0)/15.0);
    
    extinction = rayleighScattering + rayleighAbsorption + mieScattering + mieAbsorption + ozoneAbsorption;
}

vec3 getSunTransmittance(vec3 pos, vec3 sunDir) 
{
    if (rayIntersectSphere(pos, sunDir, PlanetRadius) > 0.0)
    {
        return vec3(0.0);
    }

    float atmoDist = rayIntersectSphere(pos, sunDir, AtmosphereRadius);
    float t = 0.0;

    vec3 transmittance = vec3(1.0);
    for (float i = 0.0; i < STEP_COUNT; i += 1.0) {
        float newT = ((i + 0.3)/STEP_COUNT)*atmoDist;
        float dt = newT - t;
        t = newT;

        vec3 newPos = pos + t*sunDir;

        vec3 rayleighScattering, extinction;
        float mieScattering;
        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);

        transmittance *= exp(-dt*extinction);
    }
    return transmittance;
}

void main() 
{
    vec2 dimensions = vec2(imageSize(OutputImage));

    if (gl_GlobalInvocationID.x >= (dimensions.x + 1.5) || gl_GlobalInvocationID.y >= (dimensions.y + 1.5))
        return;

    float u = clamp(gl_GlobalInvocationID.x, 0.0, dimensions.x-1.0)/dimensions.x;
    float v = clamp(gl_GlobalInvocationID.y, 0.0, dimensions.y-1.0)/dimensions.y;

    float sunCosTheta = 2.0*u - 1.0;
    float sunTheta = safeacos(sunCosTheta);
    float height = mix(PlanetRadius, AtmosphereRadius, v);

    vec3 pos = vec3(0.0, height, 0.0);
    vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));
    vec3 result = getSunTransmittance(pos, sunDir);

    imageStore(OutputImage, ivec2(gl_GlobalInvocationID.xy), vec4(result, 1.0));
}