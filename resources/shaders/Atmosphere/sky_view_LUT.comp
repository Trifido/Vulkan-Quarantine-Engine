#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba32f) uniform image2D InputImage;
layout(binding = 1, rgba32f) uniform image2D InputImage_2;
layout(binding = 2, rgba32f) uniform image2D OutputImage;

layout(set = 0, binding = 3) uniform CameraUniform
{
	mat4 view;
	mat4 proj;
	mat4 viewproj;
    vec4 position;
    vec4 frustumPlanes[6];
} cameraData;

layout(set = 0, binding = 4) uniform SunUniform
{
	vec3 direction;
    float intensity;
}  sunData;

// Math resources
const float PI = 3.14159265358;

float safeacos(const float x)
{
    return acos(clamp(x, -1.0, 1.0));
}

// From https://gamedev.stackexchange.com/questions/96459/fast-ray-sphere-collision-code.
float rayIntersectSphere(vec3 ro, vec3 rd, float rad) {
    float b = dot(ro, rd);
    float c = dot(ro, ro) - rad*rad;
    if (c > 0.0f && b > 0.0) return -1.0;
    float discr = b*b - c;
    if (discr < 0.0) return -1.0;
    // Special case: inside sphere, use far discriminant
    if (discr > b*b) return (-b + sqrt(discr));
    return -b - sqrt(discr);
}

// From https://www.shadertoy.com/view/wlBXWK
vec2 rayIntersectSphere2D(
    vec3 start, // starting position of the ray
    vec3 dir, // the direction of the ray
    float radius // and the sphere radius
) {
    // ray-sphere intersection that assumes
    // the sphere is centered at the origin.
    // No intersection when result.x > result.y
    float a = dot(dir, dir);
    float b = 2.0 * dot(dir, start);
    float c = dot(start, start) - (radius * radius);
    float d = (b*b) - 4.0*a*c;
    if (d < 0.0) return vec2(1e5,-1e5);
    return vec2(
        (-b - sqrt(d))/(2.0*a),
        (-b + sqrt(d))/(2.0*a)
    );
}

// Unidades en Megametros (KM)
const float numScatteringSteps = 32.0;
const float PlanetRadius = 6.360;
const float AtmosphereRadius = 6.460;

// Coeficientes de dispersión y absorción por KM
// Rayleight & Mie parameters
const vec3 rayleighScatteringBase = vec3(5.802, 13.558, 33.1);
const float mieScatteringBase = 3.996;
const float mieExtinctionBase = 4.4;
const float rayleighAbsorptionBase = 0.0;
const vec3 ozoneAbsorptionBase = vec3(0.650, 1.881, 0.085);

float getMiePhase(float cosTheta)
{
    const float g = 0.8;
    const float scale = 3.0 / (8.0 * PI);
    
    float num = (1.0 - g * g) * (1.0 + cosTheta * cosTheta);
    float denom = (2.0 + g * g) * pow((1.0 + g * g - 2.0 * g * cosTheta), 1.5);
    
    return scale * num / denom;
}

float getRayleighPhase(float cosTheta)
{
    const float k = 3.0 / (16.0 * PI);
    return k * (1.0 + cosTheta * cosTheta);
}

void getScatteringValues(vec3 pos, 
                         out vec3 rayleighScattering, 
                         out float mieScattering,
                         out vec3 extinction) 
{
    float altitudeKM = (length(pos)-PlanetRadius)*1000.0;
    float rayleighDensity = exp(-altitudeKM / 8.0);
    float mieDensity = exp(-altitudeKM / 1.2);
    
    rayleighScattering = rayleighScatteringBase * rayleighDensity;
    float rayleighAbsorption = rayleighAbsorptionBase * rayleighDensity;
    
    mieScattering = mieScatteringBase * mieDensity;
    float mieAbsorption = mieExtinctionBase * mieDensity;
    
    vec3 ozoneAbsorption = ozoneAbsorptionBase * max(0.0, 1.0 - abs(altitudeKM - 25.0) / 15.0);
    
    extinction = rayleighScattering + rayleighAbsorption + mieScattering + mieAbsorption + ozoneAbsorption;
}

vec3 getValFromTLUT(vec3 pos, vec3 sunDir)
{
    float height = length(pos);
    vec3 up = pos / height;
    float sunCosZenithAngle = dot(sunDir, -up);

    vec2 tLUTRes = vec2(imageSize(InputImage));
    vec2 uv = vec2(tLUTRes.x * clamp(0.5 + 0.5 * sunCosZenithAngle, 0.0, 1.0),
                   tLUTRes.y * max(0.0, min(1.0, (height - PlanetRadius) / (AtmosphereRadius - PlanetRadius))));

    return imageLoad(InputImage, ivec2(uv)).rgb;
}

vec3 getValFromMultiScattLUT(vec3 pos, vec3 sunDir)
{
    float height = length(pos);
    vec3 up = pos / height;
	float sunCosZenithAngle = dot(sunDir, up);

    vec2 msLUTRes = vec2(imageSize(InputImage_2));
    vec2 uv = vec2(msLUTRes.x*clamp(0.5 + 0.5 * sunCosZenithAngle, 0.0, 1.0),
                   msLUTRes.y*max(0.0, min(1.0, (height - PlanetRadius) / (AtmosphereRadius - PlanetRadius))));
    
    return imageLoad(InputImage_2, ivec2(uv)).rgb;
}

vec3 raymarchScattering(    vec3 viewPos,
                            vec3 rayDir,
                            vec3 sunDir,
                            float numSteps) 
{              
    vec2 atmos_intercept = rayIntersectSphere2D(viewPos, rayDir, AtmosphereRadius);
    float terra_intercept = rayIntersectSphere(viewPos, rayDir, PlanetRadius);

    float mindist, maxdist;

    if (atmos_intercept.x < atmos_intercept.y){
        // there is an atmosphere intercept!
        // start at the closest atmosphere intercept
        // trace the distance between the closest and farthest intercept
        mindist = atmos_intercept.x > 0.0 ? atmos_intercept.x : 0.0;
		maxdist = atmos_intercept.y > 0.0 ? atmos_intercept.y : 0.0;
    } else {
        // no atmosphere intercept means no atmosphere!
        return vec3(0.0);
    }

    // if in the atmosphere start at the camera
    if (length(viewPos) < AtmosphereRadius) mindist=0.0;


    // if there's a terra intercept that's closer than the atmosphere one,
    // use that instead!
    if (terra_intercept > 0.0){ // confirm valid intercepts			
        maxdist = terra_intercept;
    }

    // start marching at the min dist
    vec3 pos = viewPos + mindist * rayDir;
                              
    float cosTheta = dot(rayDir, sunDir);

	float miePhaseValue = getMiePhase(cosTheta);
	float rayleighPhaseValue = getRayleighPhase(-cosTheta);

    vec3 lum = vec3(0.0);
    vec3 transmittance = vec3(1.0);
    float t = 0.0;
    for (float i = 0.0; i < numSteps; i += 1.0) {
        float newT = ((i + 0.3)/numSteps)*(maxdist-mindist);
        float dt = newT - t;
        t = newT;

        vec3 newPos = pos + t*rayDir;

        vec3 rayleighScattering, extinction;
        float mieScattering;
        
        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);

        vec3 sampleTransmittance = exp(-dt*extinction);

        vec3 sunTransmittance = getValFromTLUT(newPos, sunDir);
        vec3 psiMS = 0.0*getValFromMultiScattLUT(newPos, sunDir);

        vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);
        vec3 mieInScattering = mieScattering*(miePhaseValue*sunTransmittance + psiMS);
        vec3 inScattering = (rayleighInScattering + mieInScattering);

        // Integrated scattering within path segment.
        vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;

        lum += scatteringIntegral*transmittance;

        transmittance *= sampleTransmittance;
    }
    return lum;
}

void main()
{
    vec2 dimensions = imageSize(OutputImage);
    
    if (gl_GlobalInvocationID.x >= (dimensions.x+1.5) || gl_GlobalInvocationID.y >= (dimensions.y+1.5))
    {
        return;
    }
    
    ivec2 resolution = imageSize(OutputImage);

    float u = clamp(gl_GlobalInvocationID.x, 0.0, dimensions.x-1.0)/dimensions.x;
    float v = clamp(gl_GlobalInvocationID.y, 0.0, dimensions.y-1.0)/dimensions.y;

    vec2 uv = vec2(u, v);

    float azimuthAngle = (uv.x - 0.5) * 2.0 * PI;
    // Non-linear mapping of altitude. See Section 5.3 of the paper.
    float adjV;
    if (uv.y > 0.5)
    {
		float coord = 1.0 - 2.0 * uv.y;
		adjV = -coord * coord;
	} 
    else
    {
		float coord = uv.y * 2.0 - 1.0;
		adjV = coord * coord;
	}

    vec3 viewPos = cameraData.position.xyz * 1e-6;
    viewPos.y += PlanetRadius;
    viewPos.y = max(PlanetRadius + 1e-6, viewPos.y);

    float height = length(viewPos);
    
    float horizonAngle = safeacos(sqrt(height * height - PlanetRadius * PlanetRadius) / height) - 0.5 * PI;
    float altitudeAngle = adjV * 0.5 * PI - horizonAngle;
    float cosAltitude = cos(altitudeAngle);

    vec3 rayDir = vec3(cosAltitude * sin(azimuthAngle), sin(altitudeAngle), -cosAltitude * cos(azimuthAngle));

    vec3 sunDir = normalize(sunData.direction);

    vec3 up = viewPos / height;
    float sunAltitude = (0.5 * PI) - acos(dot(sunDir, -up));
    vec3 resultSunDir = vec3(0.0, sin(sunAltitude), -cos(sunAltitude));
    
    const int numScatteringSteps = 16;
    vec3 lum = raymarchScattering(viewPos, rayDir, resultSunDir, numScatteringSteps);

    imageStore(OutputImage, ivec2(gl_GlobalInvocationID.xy), vec4(lum, 1.0));
}