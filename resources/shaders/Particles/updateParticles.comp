#version 450

struct Particle 
{
	vec3    position;
    float   lifeTime;
    vec4    color;
	vec3    velocity;
    float   angle;
    vec4    auxiliarData;
    vec2    currentOffset;
    vec2    nextOffset;
};

layout(std140, binding = 0) buffer InputSSBO 
{
   Particle particlesIn[ ];
};

layout(std140, binding = 1) buffer OutputSSBO 
{
   Particle particlesOut[ ];
};

layout(std430, binding = 2) buffer DeadParticlesSSBO 
{
    int deadParticles[];
};

layout(set = 0, binding = 3) uniform UniformDeltaTime
{
    float deltaTime;
} uboTimer;

layout(set = 0, binding = 4) uniform UniformParticleSystem
{
    vec4  initialColor;
    float particleLifeTime;
    float particleSystemDuration;
    float particlePerFrame;
    float gravity;
    float emissionAngle;
    float emissionRadius;
    float speed;
    float angularSpeed;
    float initAngle;
    float initSize;
    float auxData;
    uint  maxParticles;
} uboParticleSystem;

layout(set = 0, binding = 5) uniform UniformParticleTexture
{
    float numCols;
    float numRows;
    float totalSprites;
    float auxiliarData;
}uboParticleTexture;

vec2 ComputeOffset(float numRows, float numCols, int index)
{
    int col = 0;
    int row = 0;
    if (numRows < 2 && numCols < 2)
    {
        return vec2(0.0, 0.0);
    }
    else if (numCols == numRows)
    {
        col = index % int(numRows);
        row = index / int(numCols);
        return vec2(float(col) / numRows, float(row) / numCols);
    }
    else if (numCols > numRows)
    {
        col = index % int(numCols);
        row = index / int(numCols);
        return vec2(float(col) / numCols, float(row) / numCols);
    }
    else
    {
        col = index / int(numRows);
        row = index % int(numRows);
        return vec2(float(col) / numRows, float(row) / numRows);
    }
}

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    uint index = gl_GlobalInvocationID.x;

    if (index < uboParticleSystem.maxParticles)
    {
        Particle pa = particlesIn[index];

        if(pa.lifeTime > 0)
        {
            pa.lifeTime -= uboTimer.deltaTime;

            if(pa.lifeTime <= 0)
            {
                pa.lifeTime = 0;
                pa.color = vec4(0.0);
                int idDeadParticle = atomicAdd(deadParticles[deadParticles.length() - 1], 1);
                deadParticles[idDeadParticle] = int(index);
            }
            else
            {
                float currentTime = uboParticleSystem.particleLifeTime - pa.lifeTime;
                float lifeFactor = currentTime / uboParticleSystem.particleLifeTime;
                float invertLifeFactor = pa.lifeTime / uboParticleSystem.particleLifeTime;

                pa.color.a = invertLifeFactor;
                pa.position += pa.velocity * uboTimer.deltaTime;
                pa.velocity -= vec3(0, uboParticleSystem.gravity * uboTimer.deltaTime, 0);
                pa.angle += uboParticleSystem.angularSpeed * uboTimer.deltaTime;
                pa.auxiliarData.x =  uboParticleSystem.initSize * invertLifeFactor;

                float atlasProgression = lifeFactor * uboParticleTexture.totalSprites;
                int currentIndex = int (atlasProgression);
                int nextIndex = currentIndex < uboParticleTexture.totalSprites - 1 ? currentIndex + 1 : currentIndex;
                float decimal = currentIndex;

                pa.auxiliarData.y = atlasProgression - decimal;

                pa.currentOffset = ComputeOffset(uboParticleTexture.numRows, uboParticleTexture.numCols, currentIndex);
                pa.nextOffset = ComputeOffset(uboParticleTexture.numRows, uboParticleTexture.numCols, nextIndex);
            }
        }

        particlesOut[index] = pa;
    }
}